{"version":3,"file":"cubescape.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./cubescape/cubegeometry.ts","webpack:///./demo.ts","webpack:///./cubescape/cube.frag","webpack:///./cubescape/cube.vert","webpack:///external umd \"gloperate\"","webpack:///webpack/bootstrap","webpack:///./cubescape/cubescape.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"gloperate\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"gloperate\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"gloperate\")) : factory(root[\"gloperate\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__160__) {\nreturn ","\n/* spellchecker: disable */\n\nimport { gl_matrix_extensions, vec4 } from 'webgl-operate';\n\nimport {\n    Buffer,\n    Context,\n    Geometry,\n    Initializable,\n} from 'webgl-operate';\n\n/* spellchecker: enable */\n\n\nexport class CubeGeometry extends Geometry {\n\n    protected static readonly VERTICES = new Float32Array([\n        -1.0, -1.0, +1.0,\n        +1.0, -1.0, +1.0,\n        -1.0, +1.0, +1.0,\n        +1.0, +1.0, +1.0,\n        -1.0, -1.0, -1.0,\n        +1.0, -1.0, -1.0,\n        -1.0, +1.0, -1.0,\n        +1.0, +1.0, -1.0,\n    ]);\n\n    protected static readonly INDICES = new Uint8Array([0, 1, 2, 3, 7, 1, 5, 4, 7, 6, 2, 4, 0, 1]);\n\n    protected _count = 1;\n\n    protected _vertexLocation: GLuint;\n    protected _instanceLocation: GLuint;\n\n\n    /**\n     * Object constructor, requires a context and an identifier.\n     * @param context - Valid context to create the object for.\n     * @param identifier - Meaningful name for identification of this instance.\n     */\n    constructor(context: Context, identifier?: string) {\n        super(context, identifier);\n\n        /* Generate identifier from constructor name if none given. */\n        identifier = identifier !== undefined && identifier !== `` ? identifier : this.constructor.name;\n\n        const vertexVBO = new Buffer(context, `${identifier}VBO`);\n        this._buffers.push(vertexVBO);\n        const instancesVBO = new Buffer(context, `${identifier}InstancesVBO`);\n        this._buffers.push(instancesVBO);\n\n        const indexBuffer = new Buffer(context, `${identifier}IndicesVBO`);\n        this._buffers.push(indexBuffer);\n\n    }\n\n\n    /**\n     * Binds all vertex buffer objects (VBOs) to pre-set attribute binding points.\n     * @param indices - Unused, since pre-set locations are used.\n     */\n    protected bindBuffers(/*indices: Array<GLuint>*/): void {\n        const gl2facade = this.context.gl2facade;\n\n        /* Please note the implicit bind in attribEnable */\n        this._buffers[0].attribEnable(this._vertexLocation,\n            3, this.context.gl.FLOAT, false, 0, 0, true, false);\n        gl2facade.vertexAttribDivisor(this._vertexLocation, 0);\n\n        this._buffers[1].attribEnable(this._instanceLocation,\n            3, this.context.gl.UNSIGNED_BYTE, false, 0, 0, true, false);\n        gl2facade.vertexAttribDivisor(this._instanceLocation, 1);\n\n        this._buffers[2].bind();\n    }\n\n    /**\n     * Unbinds all vertex buffer objects (VBOs) and disables their attribute binding points.\n     * @param indices - Unused, since pre-set locations are used.\n     */\n    protected unbindBuffers(/*indices: Array<GLuint>*/): void {\n        /* Please note the implicit unbind in attribEnable is skipped */\n        this._buffers[0].attribDisable(this._vertexLocation, true, true);\n        this._buffers[1].attribDisable(this._instanceLocation, true, true);\n        this._buffers[2].unbind();\n    }\n\n\n    /**\n     * Creates the vertex buffer object (VBO) and creates and initializes the buffer's data store.\n     * @param vertexLocation - Attribute binding point for vertices.\n     */\n    initialize(\n        vertexLocation: GLuint = 0,\n        instanceLocation: GLuint = 1,\n    ): boolean {\n\n        this._vertexLocation = vertexLocation;\n        this._instanceLocation = instanceLocation;\n\n        const gl = this.context.gl;\n        const valid = super.initialize([gl.ARRAY_BUFFER, gl.ARRAY_BUFFER, gl.ELEMENT_ARRAY_BUFFER]);\n\n        this._buffers[0].data(CubeGeometry.VERTICES, gl.STATIC_DRAW);\n        this._buffers[2].data(CubeGeometry.INDICES, gl.STATIC_DRAW);\n\n        return valid;\n    }\n\n    /**\n     * Specifies/invokes the draw of this cube.\n     */\n    @Initializable.assert_initialized()\n    draw(): void {\n        const gl = this.context.gl;\n        const gl2facade = this.context.gl2facade;\n        gl2facade.drawElementsInstanced(gl.TRIANGLE_STRIP, CubeGeometry.INDICES.length, gl.UNSIGNED_BYTE,\n            0, this._count * this._count);\n    }\n\n    /**\n     * Specifies the number of cubes per side of the cubescape to be drawn (total is count²).\n     */\n    set count(count: GLuint) {\n        if (this._count === count) {\n            return;\n        }\n        this._count = count;\n\n        const instances = new Uint8Array(3 * count * count);\n        const vec: vec4 = vec4.create();\n        for (let i = 0; i < instances.length; i += 3) {\n            gl_matrix_extensions.encode_uint32_to_rgba8(vec, i / 3);\n            instances[i + 0] = vec[0];\n            instances[i + 1] = vec[1];\n            instances[i + 2] = vec[2];\n        }\n\n        const gl = this.context.gl;\n        this._buffers[1].data(instances, gl.DYNAMIC_DRAW);\n    }\n    get count(): GLuint {\n        return this._count;\n    }\n\n    /**\n     * Attribute location to which this geometry's vertices are bound to.\n     */\n    get vertexLocation(): GLint {\n        return this._vertexLocation;\n    }\n\n    /**\n     * Attribute location to which this geometry's instance indices are bound to.\n     */\n    get instanceLocation(): GLint {\n        return this._instanceLocation;\n    }\n\n}\n","\n/* spellchecker: disable */\n\nimport {\n    Canvas,\n    Initializable,\n    LoadingStatus,\n    Renderer,\n    viewer,\n} from 'webgl-operate';\n\n/* spellchecker: enable */\n\n\nexport abstract class Demo extends Initializable {\n\n    /**\n     * Hide the loading spinner.\n     */\n    protected showSpinner(): void {\n        const spinnerElement = document.getElementsByClassName('spinner').item(0)!;\n        (spinnerElement as HTMLElement).style.display = 'inline';\n    }\n\n    /**\n     * Hide the loading spinner.\n     */\n    protected hideSpinner(): void {\n        const spinnerElement = document.getElementsByClassName('spinner').item(0)!;\n        (spinnerElement as HTMLElement).style.display = 'none';\n    }\n\n    protected expose(): void {\n\n        (window as any)['canvas'] = this.canvas;\n        (window as any)['context'] = this.canvas.context;\n        (window as any)['controller'] = this.canvas.controller;\n\n        (window as any)['renderer'] = this.renderer;\n    }\n\n    initialize(element: HTMLCanvasElement | string): boolean {\n        const result = this.onInitialize(element);\n\n        this.renderer.loadingStatus$.subscribe((status: LoadingStatus) => {\n            if (status === LoadingStatus.Finished) {\n                this.hideSpinner();\n            } else if (status === LoadingStatus.Started) {\n                this.showSpinner();\n            }\n        });\n\n        this.expose();\n\n        return result;\n    }\n\n    uninitialize(): void {\n        this.onUninitialize();\n    }\n\n    abstract onInitialize(element: HTMLCanvasElement | string): boolean;\n\n    abstract onUninitialize(): void;\n\n    abstract get renderer(): Renderer;\n\n    abstract get canvas(): Canvas;\n\n    enableFullscreenOnCtrlClick(): void {\n\n        const e = this.canvas.element;\n        e.addEventListener('click', (event) => {\n            if (event.ctrlKey) { viewer.Fullscreen.toggle(e); }\n        });\n    }\n}\n","module.exports = \"\\nprecision lowp float;\\nprecision lowp int;\\n\\n\\n#if __VERSION__ == 100\\n    #define texture(sampler, coord) texture2D(sampler, coord)\\n#else \\n    #define varying in\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    #define fragColor gl_FragColor\\n#else\\n    layout(location = 0) out vec4 fragColor;\\n#endif\\n\\n\\nuniform sampler2D u_patches;\\nuniform int u_numcubes;\\n\\nvarying float v_heightAddition;\\nvarying vec3 v_cube;\\nvarying vec3 v_global;\\n\\n\\nvec2 extract(in vec3 x)\\n{\\n    return mix(mix(x.xy, x.xz, float(abs(x.y) > 0.999)), x.zy, float(abs(x.x) > 0.999));\\n}\\n\\nvec3 extractNormal(in vec3 x)\\n{\\n    return mix(mix(\\n        vec3(0.0, 0.0, 1.0),\\n        vec3(0.0, 1.0, 0.0),\\n        float(abs(x.y) > 0.999)\\n    ),\\n    vec3(1.0, 0.0, 0.0),\\n    float(abs(x.x) > 0.999)\\n    );\\n}\\n\\n\\nvoid main()\\n{\\n\\tvec2 texCoord = extract(v_cube) * 0.5 + 0.5;\\n\\tfloat cubeHeight = 2.0 / float(u_numcubes);\\n\\tif(v_cube.y < 0.999)\\n\\t\\ttexCoord.y = mod(v_global.y, cubeHeight) / cubeHeight;\\n\\ttexCoord.x *= 0.25;\\n\\n    // compute shadow\\n    vec3 light = vec3(-2.0, 3.0, 1.0);\\n    vec3 light_ray = normalize(light - v_global);\\n    vec3 normal = extractNormal(v_cube);\\n    float a = dot(normal, light_ray);\\n\\n    // compute color\\n\\tfloat t = (2.0 / 3.0 - v_heightAddition * 2.0) * 1.5 * 4.0 - 1.0;\\n\\tvec3 c0 = texture(u_patches, texCoord + max(floor(t), 0.0) * vec2(0.25, 0.0)).xyz;\\n\\tvec3 c1 = texture(u_patches, texCoord + min(floor(t) + 1.0, 3.0) * vec2(0.25, 0.0)).xyz;\\n\\n\\tfragColor = vec4(mix(c0, c1, smoothstep(0.25, 0.75, fract(t))) * pow(a, 0.5), 1.0);\\n}\\n\"","module.exports = \"precision lowp float;\\nprecision lowp int;\\n\\n\\n#if __VERSION__ == 100\\n    #define texture(sampler, coord) texture2D(sampler, coord)\\n#else\\n    #define varying out\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    attribute vec3 a_vertex;\\n    attribute vec3 a_instance;\\n#else\\n    in vec3 a_vertex;\\n\\tin vec3 a_instance;\\n#endif\\n\\n\\nuniform sampler2D u_terrain;\\nuniform mat4 u_viewProjection;\\nuniform float u_time;\\nuniform int u_numcubes;\\n\\nvarying float v_heightAddition;\\nvarying vec3 v_cube;\\nvarying vec3 v_global;\\n\\n\\nvoid main()\\n{\\n\\tfloat oneovernumcubes = 1.0 / float(u_numcubes);\\n\\tfloat cubeHeight = 2.0 / float(u_numcubes);\\n\\n\\tfloat instanceID = dot(a_instance, vec3(1.0,  256.0, 256.0 * 256.0));\\n\\n\\tvec2 offset = vec2(\\n\\t\\tmod(floor(instanceID), float(u_numcubes)),\\n\\t\\tfloor(floor(instanceID) * oneovernumcubes)) * 2.0 * oneovernumcubes;\\n\\tvec3 vertex = a_vertex * oneovernumcubes - (1.0 - oneovernumcubes);\\n\\tvertex.xz += offset;\\n\\n\\tfloat heightAddition = 0.5 * texture(u_terrain, offset * 0.5 + vec2(sin(u_time * 0.04), u_time * 0.02)).r * 2.0 / 3.0;\\n\\tif(a_vertex.y > 0.0)\\n\\t    vertex.y += cubeHeight * floor(heightAddition / cubeHeight);\\n\\n\\tv_heightAddition = heightAddition;\\n\\tv_cube = a_vertex;\\n\\tv_global = vertex;\\n\\tgl_Position = u_viewProjection * vec4(vertex, 1.0);\\n}\\n\"","module.exports = __WEBPACK_EXTERNAL_MODULE__160__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n/* spellchecker: disable */\n\nimport { vec3 } from 'webgl-operate';\n\nimport {\n    Camera,\n    Canvas,\n    Context,\n    DefaultFramebuffer,\n    EventProvider,\n    Invalidate,\n    Navigation,\n    Program,\n    Renderer,\n    Shader,\n    Texture2D,\n    Wizard,\n} from 'webgl-operate';\n\nimport { Demo } from '../demo';\n\nimport { CubeGeometry } from './cubegeometry';\n\n/* spellchecker: enable */\n\n// tslint:disable:max-classes-per-file\n\n\nconst _gEye = vec3.fromValues(1.5, -0.2, 1.5); //vec3.fromValues(1.0, -0.5, -1.0);\nconst _gCenter = vec3.fromValues(0.0, -1.0, 0.0);\nconst _gUp = vec3.fromValues(0.0, 1.0, 0.0);\n\n\nclass CubescapeRenderer extends Renderer {\n\n    protected _defaultFBO: DefaultFramebuffer;\n\n    protected _camera: Camera;\n    protected _navigation: Navigation;\n\n    protected _geometry: CubeGeometry;\n    protected _program: Program;\n    protected _uViewProjection: WebGLUniformLocation;\n    protected _aVertex: GLuint;\n    protected _numCubes = 16;\n\n    protected _patches: Texture2D;\n    protected _terrain: Texture2D;\n\n\n    protected onUpdate(): boolean {\n\n        this._navigation.update();\n\n        return this._altered.any || this._camera.altered;\n    }\n\n    protected onPrepare(): void {\n\n        if (this._altered.canvasSize) {\n            this._camera.viewport = [this._frameSize[0], this._frameSize[1]];\n            this._camera.aspect = this._canvasSize[0] / this._canvasSize[1];\n        }\n        if (this._altered.clearColor) {\n            this._defaultFBO.clearColor(this._clearColor);\n        }\n\n        this._geometry.count = this._numCubes;\n\n        this._altered.reset();\n    }\n\n    protected onFrame(frameNumber: number): void {\n        const gl = this._context.gl;\n\n        // bind FBO\n        this._defaultFBO.bind();\n        this._defaultFBO.clear(gl.DEPTH_BUFFER_BIT, true, true);\n\n        gl.viewport(0, 0, this._frameSize[0], this._frameSize[1]);\n\n        // gl.enable(gl.CULL_FACE);\n        // gl.cullFace(gl.BACK);\n        // gl.enable(gl.DEPTH_TEST);\n\n        this._program.bind();\n        gl.uniformMatrix4fv(this._uViewProjection, false, this._camera.viewProjection);\n        gl.uniform1i(this._program.uniform('u_numcubes'), this._geometry.count);\n        gl.uniform1f(this._program.uniform('u_time'), window.performance.now() * 0.0002);\n        this._terrain.bind(gl.TEXTURE0);\n        this._patches.bind(gl.TEXTURE1);\n        gl.uniform1i(this._program.uniform('u_terrain'), 0);\n        gl.uniform1i(this._program.uniform('u_patches'), 1);\n\n        this._geometry.bind();\n        this._geometry.draw();\n        this._geometry.unbind();\n\n        this._program.unbind();\n\n        // gl.cullFace(gl.BACK);\n        // gl.disable(gl.CULL_FACE);\n    }\n\n    protected onSwap(): void {\n        this.invalidate();\n    }\n\n    protected onInitialize(context: Context, callback: Invalidate,\n        eventProvider: EventProvider): boolean {\n        const gl = this._context.gl;\n\n        context.enable(['ANGLE_instanced_arrays']);\n\n        const internalFormatAndType = Wizard.queryInternalTextureFormat(this._context, gl.RGB, Wizard.Precision.byte);\n        this._terrain = new Texture2D(this._context);\n        this._terrain.initialize(64, 64, internalFormatAndType[0], gl.RGB, internalFormatAndType[1]);\n        this._terrain.wrap(gl.REPEAT, gl.REPEAT);\n        this._terrain.filter(gl.LINEAR, gl.LINEAR);\n        this._terrain.fetch('/demos/data/cubescape-terrain.png');\n\n        this._patches = new Texture2D(this._context);\n        this._patches.initialize(64, 16, internalFormatAndType[0], gl.RGB, internalFormatAndType[1]);\n        this._patches.wrap(gl.REPEAT, gl.REPEAT);\n        this._patches.filter(gl.NEAREST, gl.NEAREST);\n        this._patches.fetch('/demos/data/cubescape-patches.png');\n\n        // init cube geometry\n        this._geometry = new CubeGeometry(this._context, 'cubes'); // TODO not 16 every time\n        this._geometry.initialize();\n\n        // init program\n        const vert = new Shader(this._context, gl.VERTEX_SHADER, 'cube.vert');\n        vert.initialize(require('./cube.vert'));\n        const frag = new Shader(this._context, gl.FRAGMENT_SHADER, 'cube.frag');\n        frag.initialize(require('./cube.frag'));\n\n        this._program = new Program(this._context);\n        this._program.initialize([vert, frag], false);\n        this._program.attribute('a_vertex', this._geometry.vertexLocation);\n        this._program.attribute('a_instances', this._geometry.instanceLocation);\n        this._program.link();\n\n        this._uViewProjection = this._program.uniform('u_viewProjection');\n\n        // init camera\n        if (this._camera === undefined) {\n            this._camera = new Camera();\n            this._camera.eye = _gEye;\n            this._camera.center = _gCenter;\n            this._camera.up = _gUp;\n            this._camera.near = 0.1;\n            this._camera.far = 4.0;\n        }\n\n        this._navigation = new Navigation(callback, eventProvider);\n        this._navigation.camera = this._camera;\n\n        this._defaultFBO = new DefaultFramebuffer(this._context, 'DefaultFBO');\n        this._defaultFBO.initialize();\n\n        return true;\n    }\n\n    protected onUninitialize(): void {\n        this._geometry.uninitialize();\n\n        this._patches.uninitialize();\n        this._terrain.uninitialize();\n\n        this._defaultFBO.uninitialize();\n    }\n\n    protected onDiscarded(): void {\n        this._altered.alter('canvasSize');\n        this._altered.alter('clearColor');\n    }\n\n}\n\n\nexport class CubescapeDemo extends Demo {\n\n    private _canvas: Canvas;\n    private _renderer: CubescapeRenderer;\n\n    onInitialize(element: HTMLCanvasElement | string): boolean {\n\n        this._canvas = new Canvas(element, { antialias: true });\n        this._canvas.controller.multiFrameNumber = 1;\n        this._canvas.framePrecision = Wizard.Precision.byte;\n        this._canvas.frameScale = [1.0, 1.0];\n\n        this._renderer = new CubescapeRenderer();\n        this._canvas.renderer = this._renderer;\n\n        return true;\n    }\n\n    onUninitialize(): void {\n        this._canvas.dispose();\n        (this._renderer as Renderer).uninitialize();\n    }\n\n    get canvas(): Canvas {\n        return this._canvas;\n    }\n\n    get renderer(): CubescapeRenderer {\n        return this._renderer;\n    }\n\n}\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__160__","CubeGeometry","Geometry","constructor","context","identifier","super","_count","undefined","this","name","vertexVBO","Buffer","_buffers","push","instancesVBO","indexBuffer","bindBuffers","gl2facade","attribEnable","_vertexLocation","gl","FLOAT","vertexAttribDivisor","_instanceLocation","UNSIGNED_BYTE","bind","unbindBuffers","attribDisable","unbind","initialize","vertexLocation","instanceLocation","valid","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","data","VERTICES","STATIC_DRAW","INDICES","draw","drawElementsInstanced","TRIANGLE_STRIP","length","count","instances","Uint8Array","vec","vec4","create","gl_matrix_extensions","encode_uint32_to_rgba8","DYNAMIC_DRAW","Float32Array","Initializable","assert_initialized","Demo","showSpinner","document","getElementsByClassName","item","style","display","hideSpinner","expose","window","canvas","controller","renderer","element","result","onInitialize","loadingStatus$","subscribe","status","LoadingStatus","Finished","Started","uninitialize","onUninitialize","enableFullscreenOnCtrlClick","e","addEventListener","event","ctrlKey","viewer","Fullscreen","toggle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","_gEye","vec3","fromValues","_gCenter","_gUp","CubescapeRenderer","Renderer","_numCubes","onUpdate","_navigation","update","_altered","any","_camera","altered","onPrepare","canvasSize","viewport","_frameSize","aspect","_canvasSize","clearColor","_defaultFBO","_clearColor","_geometry","reset","onFrame","frameNumber","_context","clear","DEPTH_BUFFER_BIT","_program","uniformMatrix4fv","_uViewProjection","viewProjection","uniform1i","uniform","uniform1f","performance","now","_terrain","TEXTURE0","_patches","TEXTURE1","onSwap","invalidate","callback","eventProvider","enable","internalFormatAndType","Wizard","queryInternalTextureFormat","RGB","Precision","byte","Texture2D","wrap","REPEAT","filter","LINEAR","fetch","NEAREST","vert","Shader","VERTEX_SHADER","frag","FRAGMENT_SHADER","Program","attribute","link","Camera","eye","center","up","near","far","Navigation","camera","DefaultFramebuffer","onDiscarded","alter","CubescapeDemo","_canvas","Canvas","antialias","multiFrameNumber","framePrecision","frameScale","_renderer","dispose"],"sourceRoot":""}